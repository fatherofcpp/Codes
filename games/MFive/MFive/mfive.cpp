#include <QPainter>
#include <QTimer>
//#include <QSound>
#include <QMouseEvent>
#include <QMessageBox>
#include <QMenuBar>
#include <QMenu>
#include <QAction>
#include <QDebug>
#include <math.h>
#include "mfive.h"
static const QString CHESS_ONE_SOUND = ":/res/sound/chessone.wav";
static const QString WIN_SOUND = ":/res/sound/win.wav";
static const QString LOSE_SOUND = ":/res/sound/lose.wav";
static int m_sqrt(int val)
{
	int v = sqrt((double)val); 
	return v;
}

MainWindow::MainWindow(QWidget *parent)
	: QMainWindow(parent)
{
	// 设置棋盘大小
	setFixedSize(kBoardMargin * 2 + kBlockSize * ckeyBoardSizeNum, kBoardMargin * 2 + kBlockSize * ckeyBoardSizeNum);
	//    setStyleSheet("background-color:yellow;");

	// 开启鼠标hover功能，这两句一般要设置window的
	setMouseTracking(true);
	//    centralWidget()->setMouseTracking(true);

	// 添加菜单
	QMenu *gameMenu = menuBar()->addMenu(tr("Game")); // menuBar默认是存在的，直接加菜单就可以了
	QAction *actionPVP = new QAction("Person VS Person", this);
	connect(actionPVP, SIGNAL(triggered()), this, SLOT(initPVPGame()));
	gameMenu->addAction(actionPVP);

	QAction *actionPVE = new QAction("Person VS Computer", this);
	connect(actionPVE, SIGNAL(triggered()), this, SLOT(initPVEGame()));
	gameMenu->addAction(actionPVE);

	// 开始游戏
	initGame();
}

MainWindow::~MainWindow()
{
	if (game)
	{
		delete game;
		game = nullptr;
	}
}

void MainWindow::initGame()
{   
	// 初始化游戏模型
	game = new GameModel;
	initPVPGame();
}

void MainWindow::initPVPGame()
{
	game_type = PERSON;
	game->gameStatus = PLAYING;
	game->startGame(game_type);
	update();
}

void MainWindow::initPVEGame()
{
	game_type = BOT;
	game->gameStatus = PLAYING;
	game->startGame(game_type);
	update();
}

void MainWindow::paintEvent(QPaintEvent *event)
{
	QPainter painter(this);
	// 绘制棋盘
	painter.setRenderHint(QPainter::Antialiasing, true); // 抗锯齿
	//    QPen pen; // 调整线条宽度
	//    pen.setWidth(2);
	//    painter.setPen(pen);
	for (int i = 0; i < ckeyBoardSizeNum + 1; i++)
	{
		painter.drawLine(kBoardMargin + kBlockSize * i, kBoardMargin, kBoardMargin + kBlockSize * i, size().height() - kBoardMargin);
		painter.drawLine(kBoardMargin, kBoardMargin + kBlockSize * i, size().width() - kBoardMargin, kBoardMargin + kBlockSize * i);
	}

	QBrush brush;
	brush.setStyle(Qt::SolidPattern);
	// 绘制落子标记(防止鼠标出框越界)
	if (clickPosRow > 0 && clickPosRow < ckeyBoardSizeNum &&
		clickPosCol > 0 && clickPosCol < ckeyBoardSizeNum &&
		game->gameMapVec[clickPosRow][clickPosCol] == 0)
	{
		if (game->playerFlag)
			brush.setColor(Qt::white);
		else
			brush.setColor(Qt::black);
		painter.setBrush(brush);
		painter.drawRect(kBoardMargin + kBlockSize * clickPosCol - kMarkSize / 2, kBoardMargin + kBlockSize * clickPosRow - kMarkSize / 2, kMarkSize, kMarkSize);
	}

	// 绘制棋子 
	for (int i = 0; i < ckeyBoardSizeNum; i++)
		for (int j = 0; j < ckeyBoardSizeNum; j++)
		{
			if (game->gameMapVec[i][j] == 1)
			{
				brush.setColor(Qt::white);
				painter.setBrush(brush);
				painter.drawEllipse(kBoardMargin + kBlockSize * j - kRadius, kBoardMargin + kBlockSize * i - kRadius, kRadius * 2, kRadius * 2);
			}
			else if (game->gameMapVec[i][j] == -1)
			{
				brush.setColor(Qt::black);
				painter.setBrush(brush);
				painter.drawEllipse(kBoardMargin + kBlockSize * j - kRadius, kBoardMargin + kBlockSize * i - kRadius, kRadius * 2, kRadius * 2);
			}
		}

		// 判断输赢
		if (clickPosRow > 0 && clickPosRow < ckeyBoardSizeNum &&
			clickPosCol > 0 && clickPosCol < ckeyBoardSizeNum &&
			(game->gameMapVec[clickPosRow][clickPosCol] == 1 ||
			game->gameMapVec[clickPosRow][clickPosCol] == -1))
		{
			if (game->isWin(clickPosRow, clickPosCol) && game->gameStatus == PLAYING)
			{
				qDebug() << "win";
				game->gameStatus = WIN;
				//QSound::play(WIN_SOUND);
				QString str;
				if (game->gameMapVec[clickPosRow][clickPosCol] == 1)
					str = "white player";
				else if (game->gameMapVec[clickPosRow][clickPosCol] == -1)
					str = "black player";
				QMessageBox::StandardButton btnValue = QMessageBox::information(this, "congratulations", str + " win!");

				// 重置游戏状态，否则容易死循环
				if (btnValue == QMessageBox::Ok)
				{
					game->startGame(game_type);
					game->gameStatus = PLAYING;
				}
			}
		}


		// 判断死局
		if (game->isDeadGame())
		{
			//QSound::play(LOSE_SOUND);
			QMessageBox::StandardButton btnValue = QMessageBox::information(this, "oops", "dead game!");
			if (btnValue == QMessageBox::Ok)
			{
				game->startGame(game_type);
				game->gameStatus = PLAYING;
			}

		}
}

void MainWindow::mouseMoveEvent(QMouseEvent *event)
{   
	// 通过鼠标的hover确定落子的标记
	int x = event->x();
	int y = event->y();

	// 棋盘边缘不能落子
	if (x >= kBoardMargin + kBlockSize / 2 &&
		x < size().width() - kBoardMargin &&
		y >= kBoardMargin + kBlockSize / 2 &&
		y < size().height()- kBoardMargin)
	{
		// 获取最近的左上角的点
		int col = x / kBlockSize;
		int row = y / kBlockSize;

		int leftTopPosX = kBoardMargin + kBlockSize * col;
		int leftTopPosY = kBoardMargin + kBlockSize * row;

		// 根据距离算出合适的点击位置,一共四个点，根据半径距离选最近的
		clickPosRow = -1; // 初始化最终的值
		clickPosCol = -1;
		int len = 0; // 计算完后取整就可以了

		// 确定一个误差在范围内的点，且只可能确定一个出来
		len = m_sqrt((x - leftTopPosX) * (x - leftTopPosX) + (y - leftTopPosY) * (y - leftTopPosY));
		if (len < kPosDelta)
		{
			clickPosRow = row;
			clickPosCol = col;
		}
		len = m_sqrt((x - leftTopPosX - kBlockSize) * (x - leftTopPosX - kBlockSize) + (y - leftTopPosY) * (y - leftTopPosY));
		if (len < kPosDelta)
		{
			clickPosRow = row;
			clickPosCol = col + 1;
		}
		len = m_sqrt((x - leftTopPosX) * (x - leftTopPosX) + (y - leftTopPosY - kBlockSize) * (y - leftTopPosY - kBlockSize));
		if (len < kPosDelta)
		{
			clickPosRow = row + 1;
			clickPosCol = col;
		}
		len = m_sqrt((x - leftTopPosX - kBlockSize) * (x - leftTopPosX - kBlockSize) + (y - leftTopPosY - kBlockSize) * (y - leftTopPosY - kBlockSize));
		if (len < kPosDelta)
		{
			clickPosRow = row + 1;
			clickPosCol = col + 1;
		}
	}

	// 存了坐标后也要重绘
	update();
}

void MainWindow::mouseReleaseEvent(QMouseEvent *event)
{
	// 人下棋，并且不能抢机器的棋
	if (!(game_type == BOT && !game->playerFlag))
	{
		chessOneByPerson();
		// 如果是人机模式，需要调用AI下棋
		if (game->gameType == BOT && !game->playerFlag)
		{
			// 用定时器做一个延迟
			QTimer::singleShot(kAIDelay, this, SLOT(chessOneByAI()));
		}
	}

}

void MainWindow::chessOneByPerson()
{
	// 根据当前存储的坐标下子
	// 只有有效点击才下子，并且该处没有子
	if (clickPosRow != -1 && clickPosCol != -1 && game->gameMapVec[clickPosRow][clickPosCol] == 0)
	{
		game->actionByPerson(clickPosRow, clickPosCol);
		//QSound::play(CHESS_ONE_SOUND);

		// 重绘
		update();
	}
}

void MainWindow::chessOneByAI()
{
	game->actionByAI(clickPosRow, clickPosCol);
//	QSound::play(CHESS_ONE_SOUND);
	update();
}

